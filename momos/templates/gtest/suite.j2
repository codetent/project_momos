#include <iostream>
#include <gtest/gtest.h>

#include "momos/macros.hpp"

{% for include in includes %}
#include "{{ include }}"
{% endfor %}


#define WARN(x) std::cerr << "[     WARN ] " << x << std::endl


class StateEnv : public ::testing::Environment
{
public:
    void SetUp() override {
        HOOK_RUN(before_all);
    }

    void TearDown() override {
        HOOK_RUN(after_all);
    }
};


class StateTest : public ::testing::Test
{
protected:
    void SetUp() override
    {
        HOOK_RUN(before);
    }

    void TearDown() override
    {
        HOOK_RUN(after);
    }
};

{% for case in suite.cases %}
{% set last_step = case.steps[-1] %}
TEST_F(StateTest, {{ last_step.transition.from_state.id }}__{{ last_step.transition.to_state.id }}__{{ case.mode.description | pascalcase }})
{
    {% for step in case.steps %}
    {% set from_state = step.transition.from_state %}
    {% set to_state = step.transition.to_state %}
    {% set step_index = loop.index %}

    // [Step {{ step_index }}]: {{ step.description }} ----------
    ASSERT_EQ(STATE_VAR_GET(), STATE_GET({{ from_state.id }}));

    {% for arg in step.arguments %}
    {% set arg_name = 'arg_' ~ step_index ~ '_' ~ loop.index %}
    double {{ arg_name }} = {{ arg | default('0', true) }};
    if (!PREPARE_RUN({{ from_state.id }}, {{ to_state.id }}, &{{ arg_name }}))
    {
        WARN("Transition preparation undefined for {{ from_state.id }} -> {{ to_state.id }}");
    }
    HOOK_RUN(progress);
    {% endfor %}

    {% if step.mode.fails %}
    ASSERT_NE(STATE_VAR_GET(), STATE_GET({{ to_state.id }}));
    {% else %}
    ASSERT_EQ(STATE_VAR_GET(), STATE_GET({{ to_state.id }}));
    {% endif %}

    {% endfor %}
}

{% endfor %}


int main(int argc, char **argv)
{
    ::testing::InitGoogleTest(&argc, argv);
    ::testing::AddGlobalTestEnvironment(new StateEnv());
    return RUN_ALL_TESTS();
}
